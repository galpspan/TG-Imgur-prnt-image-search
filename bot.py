import logging
import random
import string
import time
import asyncio
import requests
from bs4 import BeautifulSoup
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackContext,
    MessageHandler,
    filters,
    ContextTypes,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
    handlers=[logging.FileHandler("image_bot.log"), logging.StreamHandler()],
)
logger = logging.getLogger(__name__)

class ImageBot:
    def __init__(self):
        self.valid_extensions = [".jpg", ".jpeg", ".png", ".gif"]
        self.user_agents = [
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
            "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
        ]
        self.sessions = {}
        self.last_commands = {}  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫–æ–º–∞–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

    def format_time(self, seconds: int) -> str:
        hours = seconds // 3600
        minutes = (seconds % 3600) // 60
        seconds = seconds % 60
        if hours > 0:
            return f"{hours}—á {minutes}–º {seconds}—Å"
        elif minutes > 0:
            return f"{minutes}–º {seconds}—Å"
        else:
            return f"{seconds}—Å"

    def generate_random_string(self, length: int) -> str:
        chars = string.ascii_letters + string.digits
        return "".join(random.choice(chars) for _ in range(length))

    def check_image(self, url: str) -> str | None:
        try:
            headers = {"User-Agent": random.choice(self.user_agents)}
            head_response = requests.head(
                url, headers=headers, timeout=5, allow_redirects=True
            )
            if head_response.status_code != 200:
                return None

            content_type = head_response.headers.get("content-type", "")
            if not any(
                ext in content_type for ext in ["image/jpeg", "image/png", "image/gif"]
            ):
                return None

            get_response = requests.get(url, headers=headers, stream=True, timeout=5)
            if get_response.status_code != 200:
                return None

            content_length = int(get_response.headers.get("content-length", 0))
            if content_length < 1024 or content_length > 20 * 1024 * 1024:
                return None

            first_chunk = next(get_response.iter_content(4))
            if first_chunk.startswith(b"\xFF\xD8\xFF"):
                return "jpg"
            elif first_chunk.startswith(b"\x89PNG"):
                return "png"
            elif first_chunk.startswith(b"GIF8"):
                return "gif"

            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {url}: {str(e)}")
            return None

    async def check_image_async(self, url):
        loop = asyncio.get_event_loop()
        return url, await loop.run_in_executor(None, self.check_image, url)

    def extract_prnt_image_url(self, code: str) -> str | None:
        try:
            url = f"https://prnt.sc/{code}"
            headers = {"User-Agent": random.choice(self.user_agents)}
            response = requests.get(url, headers=headers, timeout=5)
            response.raise_for_status()

            soup = BeautifulSoup(response.text, "html.parser")
            img_tag = soup.find("img", {"class": "screenshot-image"})
            if img_tag and "src" in img_tag.attrs:
                img_url = img_tag["src"]
                if img_url.startswith("//"):
                    img_url = f"https:{img_url}"
                elif img_url.startswith("http"):
                    pass
                else:
                    return None

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ placeholder –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                if "prntscr.com/placeholder" in img_url:
                    return None

                return img_url
            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ prnt.sc: {str(e)}")
            return None

    async def extract_prnt_image_url_async(self, code):
        loop = asyncio.get_event_loop()
        return await loop.run_in_executor(None, self.extract_prnt_image_url, code)

    async def show_main_menu(self, update: Update):
        reply_keyboard = [["PRNT.SC", "IMGUR"], ["–ü–û–í–¢–û–†–ò–¢–¨", "–°–¢–û–ü"]]
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=ReplyKeyboardMarkup(
                reply_keyboard,
                resize_keyboard=True,
                is_persistent=True,
                one_time_keyboard=False,
            ),
        )

    async def start(self, update: Update, context: CallbackContext):
        await self.show_main_menu(update)
        await update.message.reply_text(
            """
–ü—Ä–∏–≤–µ—Ç! –Ø –∏—â—É —Å–ª—É—á–∞–π–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Ä–∞–∑–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤.

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/getimg <5|7> <1-50> - –ø–æ–∏—Å–∫ –Ω–∞ Imgur
/getprnt <1-50> - –ø–æ–∏—Å–∫ –Ω–∞ prnt.sc (–¥–ª–∏–Ω–∞ –≤—Å–µ–≥–¥–∞ 6)
/stop - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø–æ–∏—Å–∫
/repeat - –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–∏—Å–∫

–ü—Ä–∏–º–µ—Ä—ã:
/getimg 5 10
/getprnt 5

–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:
"""
        )

    async def stop(self, update: Update, context: CallbackContext):
        user_id = update.effective_user.id
        session = self.sessions.get(user_id)

        if session and session.get("task"):
            session["stop"] = True
            session["task"].cancel()

            elapsed = int(time.time() - session.get("start_time", time.time()))
            found = session.get("found", 0)
            analyzed = session.get("analyzed", 0)
            length = session.get("length", 0)
            count = session.get("count", 0)
            service = "prnt.sc" if length == 6 else "imgur"

            logger.info(
                f"{service} –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –±—ã–ª –æ—Ç–º–µ–Ω—ë–Ω. "
                f"–î–ª–∏–Ω–∞: {length}, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {count}, "
                f"–Ω–∞–π–¥–µ–Ω–æ: {found}, –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {analyzed}, "
                f"–≤—Ä–µ–º—è: {self.format_time(elapsed)}"
            )

            await update.message.reply_text(
                f"‚õîÔ∏è –ü–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.\n"
                f"–°–µ—Ä–≤–∏—Å: {service}\n"
                f"–î–ª–∏–Ω–∞: {length}\n"
                f"–ù–∞–π–¥–µ–Ω–æ: {found}/{count}\n"
                f"–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: {analyzed}\n"
                f"–í—Ä–µ–º—è: {self.format_time(elapsed)}"
            )

            del self.sessions[user_id]
        else:
            logger.info(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /stop, –Ω–æ –ø–æ–∏—Å–∫ –Ω–µ –±—ã–ª –Ω–∞—á–∞—Ç."
            )
            await update.message.reply_text("‚ùóÔ∏è–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞.")

    async def repeat_last_command(self, update: Update, context: CallbackContext):
        user_id = update.effective_user.id
        last_command = self.last_commands.get(user_id)
        
        if not last_command:
            await update.message.reply_text("‚ùóÔ∏è–ù–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è.")
            return
            
        if last_command["type"] == "imgur":
            context.args = [str(last_command["length"]), str(last_command["count"])]
            await self.get_imgur_images(update, context)
        elif last_command["type"] == "prnt":
            context.args = [str(last_command["count"])]
            await self.get_prnt_images(update, context)

    async def get_imgur_images(self, update: Update, context: CallbackContext):
        user_id = update.effective_user.id

        if user_id in self.sessions:
            prev_session = self.sessions[user_id]
            if prev_session.get("task"):
                prev_session["stop"] = True
                prev_session["task"].cancel()
                logger.info(
                    f"–ü—Ä–µ–¥—ã–¥—É—â–∏–π –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –±—ã–ª –æ—Ç–º–µ–Ω—ë–Ω –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –Ω–æ–≤–æ–≥–æ"
                )

        args = context.args
        if len(args) != 2:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /getimg <5|7> <1-50>")
            return

        try:
            length = int(args[0])
            count = int(args[1])
        except ValueError:
            await update.message.reply_text("–î–ª–∏–Ω–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏")
            return

        if length not in [5, 7]:
            await update.message.reply_text("–î–ª–∏–Ω–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ 5 –∏–ª–∏ 7 —Å–∏–º–≤–æ–ª–æ–≤")
            return

        if not 1 <= count <= 50:
            await update.message.reply_text("–ú–æ–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –æ—Ç 1 –¥–æ 50 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞ —Ä–∞–∑")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
        self.last_commands[user_id] = {
            "type": "imgur",
            "length": length,
            "count": count,
            "timestamp": time.time()
        }

        start_time = time.time()
        analyzed = 0
        found = 0

        logger.info(
            f"Imgur –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞—á–∞—Ç. –î–ª–∏–Ω–∞: {length}, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {count}"
        )

        status_msg = await update.message.reply_text(
            f"üîç –ü–æ–∏—Å–∫ Imgur –Ω–∞—á–∞—Ç\n"
            f"–î–ª–∏–Ω–∞: {length}\n"
            f"–¶–µ–ª—å: {count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n"
            f"–ù–∞–π–¥–µ–Ω–æ: 0/{count}\n"
            f"–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: 0\n"
            f"–í—Ä–µ–º—è: 0—Å"
        )

        async def update_status():
            nonlocal analyzed, found
            elapsed = int(time.time() - start_time)
            await status_msg.edit_text(
                f"üîç –ü–æ–∏—Å–∫ Imgur\n"
                f"–î–ª–∏–Ω–∞: {length}\n"
                f"–¶–µ–ª—å: {count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n"
                f"–ù–∞–π–¥–µ–Ω–æ: {found}/{count}\n"
                f"–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: {analyzed}\n"
                f"–í—Ä–µ–º—è: {self.format_time(elapsed)}"
            )

        async def search_loop():
            nonlocal analyzed, found
            while found < count and not self.sessions[user_id]["stop"]:
                tasks = []
                for _ in range(10):
                    code = self.generate_random_string(length)
                    url = f"https://i.imgur.com/{code}.jpg"
                    tasks.append(self.check_image_async(url))

                results = await asyncio.gather(*tasks, return_exceptions=True)

                for result in results:
                    if self.sessions[user_id]["stop"]:
                        return

                    if isinstance(result, Exception):
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(result)}")
                        continue

                    url, ext = result
                    analyzed += 1
                    self.sessions[user_id]["analyzed"] = analyzed

                    if ext:
                        found += 1
                        self.sessions[user_id]["found"] = found
                        caption = f"({found}/{count}) Imgur: [{url.split('/')[-1].split('.')[0]}]({url})"
                        try:
                            if ext == "gif":
                                await update.message.reply_animation(
                                    animation=url, caption=caption, parse_mode="Markdown"
                                )
                            else:
                                await update.message.reply_photo(
                                    photo=url, caption=caption, parse_mode="Markdown"
                                )
                            await update_status()
                            await asyncio.sleep(1)
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
                            found -= 1
                            self.sessions[user_id]["found"] = found

                    if analyzed % 10 == 0 or (ext and found > 0):
                        await update_status()

                await asyncio.sleep(0.1)

            if not self.sessions[user_id]["stop"]:
                elapsed = int(time.time() - start_time)
                logger.info(
                    f"Imgur –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∑–∞–≤–µ—Ä—à—ë–Ω. "
                    f"–î–ª–∏–Ω–∞: {length}, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {count}, "
                    f"–Ω–∞–π–¥–µ–Ω–æ: {found}, –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {analyzed}, "
                    f"–≤—Ä–µ–º—è: {self.format_time(elapsed)}"
                )
                await update.message.reply_text(
                    f"‚úÖ –ü–æ–∏—Å–∫ Imgur –∑–∞–≤–µ—Ä—à—ë–Ω\n"
                    f"–î–ª–∏–Ω–∞: {length}\n"
                    f"–¶–µ–ª—å: {count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n"
                    f"–ù–∞–π–¥–µ–Ω–æ: {found}/{count}\n"
                    f"–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: {analyzed}\n"
                    f"–í—Ä–µ–º—è: {self.format_time(elapsed)}"
                )
                del self.sessions[user_id]

        task = asyncio.create_task(search_loop())
        self.sessions[user_id] = {
            "task": task,
            "stop": False,
            "start_time": start_time,
            "analyzed": analyzed,
            "found": found,
            "length": length,
            "count": count,
            "status_msg": status_msg,
        }

    async def get_prnt_images(self, update: Update, context: CallbackContext):
        user_id = update.effective_user.id

        if user_id in self.sessions:
            prev_session = self.sessions[user_id]
            if prev_session.get("task"):
                prev_session["stop"] = True
                prev_session["task"].cancel()
                logger.info(
                    f"–ü—Ä–µ–¥—ã–¥—É—â–∏–π –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –±—ã–ª –æ—Ç–º–µ–Ω—ë–Ω –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –Ω–æ–≤–æ–≥–æ"
                )

        args = context.args
        if len(args) != 1:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /getprnt <1-50>")
            return

        try:
            count = int(args[0])
        except ValueError:
            await update.message.reply_text("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            return

        if not 1 <= count <= 50:
            await update.message.reply_text("–ú–æ–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –æ—Ç 1 –¥–æ 50 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞ —Ä–∞–∑")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
        self.last_commands[user_id] = {
            "type": "prnt",
            "length": 6,  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–ª—è prnt.sc
            "count": count,
            "timestamp": time.time()
        }

        length = 6  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–ª—è prnt.sc
        start_time = time.time()
        analyzed = 0
        found = 0

        logger.info(
            f"Prnt.sc –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞—á–∞—Ç. –î–ª–∏–Ω–∞: {length}, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {count}"
        )

        status_msg = await update.message.reply_text(
            f"üîç –ü–æ–∏—Å–∫ prnt.sc –Ω–∞—á–∞—Ç\n"
            f"–î–ª–∏–Ω–∞: {length}\n"
            f"–¶–µ–ª—å: {count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n"
            f"–ù–∞–π–¥–µ–Ω–æ: 0/{count}\n"
            f"–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: 0\n"
            f"–í—Ä–µ–º—è: 0—Å"
        )

        async def update_status():
            nonlocal analyzed, found
            elapsed = int(time.time() - start_time)
            await status_msg.edit_text(
                f"üîç –ü–æ–∏—Å–∫ prnt.sc\n"
                f"–î–ª–∏–Ω–∞: {length}\n"
                f"–¶–µ–ª—å: {count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n"
                f"–ù–∞–π–¥–µ–Ω–æ: {found}/{count}\n"
                f"–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: {analyzed}\n"
                f"–í—Ä–µ–º—è: {self.format_time(elapsed)}"
            )

        async def search_loop():
            nonlocal analyzed, found
            while found < count and not self.sessions[user_id]["stop"]:
                tasks = []
                for _ in range(5):  # –ú–µ–Ω—å—à–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–∑-–∑–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
                    code = self.generate_random_string(length).lower()
                    tasks.append(self.extract_prnt_image_url_async(code))

                results = await asyncio.gather(*tasks, return_exceptions=True)

                for result in results:
                    if self.sessions[user_id]["stop"]:
                        return

                    if isinstance(result, Exception):
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ prnt.sc: {str(result)}")
                        continue

                    img_url = result
                    analyzed += 1
                    self.sessions[user_id]["analyzed"] = analyzed

                    if img_url:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∞–º–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                        ext = await self.check_image_async(img_url)
                        if ext[1]:
                            found += 1
                            self.sessions[user_id]["found"] = found
                            caption = f"({found}/{count}) prnt.sc: [{img_url.split('/')[-1].split('.')[0]}]({img_url})"
                            try:
                                if ext[1] == "gif":
                                    await update.message.reply_animation(
                                        animation=img_url,
                                        caption=caption,
                                        parse_mode="Markdown",
                                    )
                                else:
                                    await update.message.reply_photo(
                                        photo=img_url,
                                        caption=caption,
                                        parse_mode="Markdown",
                                    )
                                await update_status()
                                await asyncio.sleep(1)
                            except Exception as e:
                                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
                                found -= 1
                                self.sessions[user_id]["found"] = found

                    if analyzed % 5 == 0 or (img_url and found > 0):
                        await update_status()

                await asyncio.sleep(0.5)  # –ë–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –∏–∑-–∑–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞

            if not self.sessions[user_id]["stop"]:
                elapsed = int(time.time() - start_time)
                logger.info(
                    f"Prnt.sc –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∑–∞–≤–µ—Ä—à—ë–Ω. "
                    f"–î–ª–∏–Ω–∞: {length}, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {count}, "
                    f"–Ω–∞–π–¥–µ–Ω–æ: {found}, –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {analyzed}, "
                    f"–≤—Ä–µ–º—è: {self.format_time(elapsed)}"
                )
                await update.message.reply_text(
                    f"‚úÖ –ü–æ–∏—Å–∫ prnt.sc –∑–∞–≤–µ—Ä—à—ë–Ω\n"
                    f"–î–ª–∏–Ω–∞: {length}\n"
                    f"–¶–µ–ª—å: {count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n"
                    f"–ù–∞–π–¥–µ–Ω–æ: {found}/{count}\n"
                    f"–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: {analyzed}\n"
                    f"–í—Ä–µ–º—è: {self.format_time(elapsed)}"
                )
                del self.sessions[user_id]

        task = asyncio.create_task(search_loop())
        self.sessions[user_id] = {
            "task": task,
            "stop": False,
            "start_time": start_time,
            "analyzed": analyzed,
            "found": found,
            "length": length,
            "count": count,
            "status_msg": status_msg,
        }

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        text = update.message.text

        if text == "PRNT.SC":
            reply_keyboard = [
                ["1", "3", "5"],
                ["10", "15", "25"],
                ["50", "–ù–ê–ó–ê–î"],
            ]
            await update.message.reply_text(
                "PRNT.SC - –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:",
                reply_markup=ReplyKeyboardMarkup(
                    reply_keyboard, resize_keyboard=True, is_persistent=True
                ),
            )
            context.user_data["mode"] = "prnt_sc"  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã

        elif text == "IMGUR":
            reply_keyboard = [["5", "7"], ["–ù–ê–ó–ê–î"]]
            await update.message.reply_text(
                "IMGUR - –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª:",
                reply_markup=ReplyKeyboardMarkup(
                    reply_keyboard, resize_keyboard=True, is_persistent=True
                ),
            )
            context.user_data["mode"] = "imgur_interval"  # –†–µ–∂–∏–º –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –¥–ª—è IMGUR (5 –∏–ª–∏ 7)
        elif text in ["5", "7"] and context.user_data.get("mode") == "imgur_interval":
            context.user_data["imgur_interval"] = text  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
            reply_keyboard = [
                ["1", "3", "5"],
                ["10", "15", "25"],
                ["50", "–ù–ê–ó–ê–î"],
            ]
            await update.message.reply_text(
                f"IMGUR - –í—ã–±—Ä–∞–Ω –∏–Ω—Ç–µ—Ä–≤–∞–ª {text}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:",
                reply_markup=ReplyKeyboardMarkup(
                    reply_keyboard, resize_keyboard=True, is_persistent=True
                ),
            )
            context.user_data["mode"] = "imgur_numbers"  # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤ —Ä–µ–∂–∏–º –≤—ã–±–æ—Ä–∞ —á–∏—Å–µ–ª

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —á–∏—Å–µ–ª (–¥–ª—è –æ–±–æ–∏—Ö —Ä–µ–∂–∏–º–æ–≤)
        elif text in ["1", "3", "5", "10", "15", "25", "50"]:
            if context.user_data.get("mode") == "imgur_numbers":
                # –î–ª—è IMGUR
                interval = context.user_data["imgur_interval"]
                # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∏—Å–∫–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∏–∑ –∫–Ω–æ–ø–æ–∫
                context.args = [interval, text]
                await self.get_imgur_images(update, context)
            else:
                # –î–ª—è PRNT.SC
                # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∏—Å–∫–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∏–∑ –∫–Ω–æ–ø–æ–∫
                context.args = [text]
                await self.get_prnt_images(update, context)

            await self.show_main_menu(update)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            context.user_data.clear()  # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç

        elif text == "–ù–ê–ó–ê–î":
            await self.show_main_menu(update)
            context.user_data.clear()

        elif text == "–°–¢–û–ü":
            await self.stop(update, context)
            await self.show_main_menu(update)
            
        elif text == "–ü–û–í–¢–û–†–ò–¢–¨":
            await self.repeat_last_command(update, context)

def main():
    bot = ImageBot()
    
    # –ß—Ç–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞
    try:
        with open("token.txt", "r") as f:
            token = f.read().strip()
    except FileNotFoundError:
        logger.error("–§–∞–π–ª token.txt –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª —Å —Ç–æ–∫–µ–Ω–æ–º –±–æ—Ç–∞.")
        return
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ token.txt: {str(e)}")
        return

    if not token:
        logger.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ token.txt")
        return

    application = Application.builder().token(token).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", bot.start))
    application.add_handler(CommandHandler("getimg", bot.get_imgur_images))
    application.add_handler(CommandHandler("getprnt", bot.get_prnt_images))
    application.add_handler(CommandHandler("stop", bot.stop))
    application.add_handler(CommandHandler("repeat", bot.repeat_last_command))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –∫–Ω–æ–ø–æ–∫)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_message))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    application.run_polling()

if __name__ == "__main__":
    main()
